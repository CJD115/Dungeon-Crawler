using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.Tilemaps;

/// <summary>
/// Generates dungeon layouts using a simple random walk algorithm.
/// </summary>
public class SimpleRandomWalkDungeonGenerator : MonoBehaviour
{
    [SerializeField]
    protected Vector2Int startPosition = Vector2Int.zero; // Starting position for the random walk

    [SerializeField]
    private int iterations = 10; // Number of random walk iterations
    [SerializeField]
    public int walkLength = 10; // Length of each random walk
    [SerializeField]
    public bool StartRandomlyEachIteration = true; // Whether to start each iteration at a random floor position
    [SerializeField]
    private TilemapVisualizer tilemapVisualizer; // Reference to the TilemapVisualizer component

    /// <summary>
    /// Runs the procedural generation process and logs the generated floor positions.
    /// </summary>
    public void RunProceduralGeneration()
    {
        HashSet<Vector2Int> floorPositions = RunRandomWalk();
        tilemapVisualizer.Clear();
        tilemapVisualizer.PaintFloorTiles(floorPositions);
    }

    /// <summary>
    /// Performs the random walk algorithm to generate floor positions.
    /// </summary>
    /// <returns>A set of floor positions generated by the random walk.</returns>
    protected HashSet<Vector2Int> RunRandomWalk()
    {
        var currentPosition = startPosition;
        HashSet<Vector2Int> floorPositions = new HashSet<Vector2Int>();
        for (int i = 0; i < iterations; i++)
        {
            var path = ProceduralGenerationAlgorithms.SimpleRandomWalk(currentPosition, walkLength);
            floorPositions.UnionWith(path);
            if (StartRandomlyEachIteration)
            {
                currentPosition = floorPositions.ElementAt(UnityEngine.Random.Range(0, floorPositions.Count));
            }
        }
        return floorPositions;
    }
}

